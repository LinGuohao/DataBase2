Databases II. Midterm test, 2020.10.20. 14.15
Name:BO LIN
Neptun code:HJUEIX

Solutions should be written into this file and sent to the following email address:
nikovits@inf.elte.hu

Minimal requirement from "paper" exercises: 8 points
Minimal requirement from computer exercises: 8 points
Grade levels will be the following: 
   24 points (2), 33 points (3), 42 points (4), 51 points (5)

"Paper" exercises
========================================================================
1. (6 points)
Insert the following keys (in the given order) into the B+ tree below: 53, 22, 92 
Let's suppose that a node (block) can contain 3 keys and 4 pointers.
Redraw the tree after each split.

------------------------------------------------------------------------
Solution:
... you should write your solution here ...

                      52|70
                22|41   56     78|87
   16|22  31|35    41|44  52|53  56|68 70|74 78|81 87|92

========================================================================
2. (6 points)
a) Compress the following bit vector with run-length encoding:
   100000000000000010000000000011

b) Decompress the following run-length encoded bit vector:
   111011101010110110
------------------------------------------------------------------------
Solution:
... you should write your solution here ...

a) 111011111110101100
b) 000000000000001001000000
========================================================================
3. (8 points)
There is a Linear hash table below. We can put two records into a block,
n = 4 (current number of buckets); i = 2 (number of bits used);
r/n = 2.9 (predefined threshold, where r is the actual number of records)

0100                 0111 
----                 ----
1100   0101   1010   1011
0000   1101   0010   0011 
----   ----   ----   ----
 00     01     10     11

Insert the following values into the hash table: 1000, 1110, 0110, 1111
Redraw the diagram when you create a new bucket.
------------------------------------------------------------------------
Solution:
... you should write your solution here ...
insert 1000
0100
1000              0111
----              ----
1100  0101  1010  1011
0000  1101  0010  0011 
----  ----  ----  ----
 00    01    10    11
 insert 1110
 r/n=3
                0111 1110
 ----           ---- ----
 1000 0101 1010 1011 0100
 0000 1101 0010 0011 1100
 ---- ---- ---- ---- ----
 000  001  010  011  100
 insert 0110
           0110 0111 1110
 ----      ---- ---- ----
 1000 0101 1010 1011 0111
 0000 1101 0010 0011 1100
 ---- ---- ---- ---- ----
 000  001   010  011 110
 insert 1111
               1111
          0110 0111 1110
----      ---- ---- ----
1000 0101 1010 1011 0100
0000 1101 0010 0011 1100
---- ---- ---- ---- ----
000  001  010  011  100
========================================================================
4. (10 points)
Let's consider a relation R with the following parameters:
T(R)=1600000, block size = 8192 bytes, L(R)=256 bytes, V(R,A)=250, and let W the result
of the following query: W <-- SELECT c1,c2 FROM R WHERE A='x';
a) Compute B(W) if L(W)=64 bytes.

b) What is the cost (in block I/O) of a sort operation on R, if the memory size is 101 blocks?
------------------------------------------------------------------------
Solution:
... you should write your solution here ...
a)
bf(R) = (block size)/L(R) = 8192/256 = 32
bf(w) = (block size)/L(W) = 8192/64 = 128
T(W) = T(R)/V(R,A) = 6400
B(R) = T(R)/bf(R) = 6400/128 = 50000
B(W) = T(W)/bf(W) = 50

b)
2*B(R) + 2*B(R)log[B(R)/M] - B(R)
100000+100000log100(50000/101) - 50000

========================================================================
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
========================================================================
Computer exercises in SQL and PL/SQL. 
You should send your queries and programs as well as the output!!!
You can work either in Aramis or Ullman database.
------------------------------------------------------------------------
5. (10 points)
Give the name and size of the BITMAP indexes whose owner is �NIKOVITS� (Index_name, Size)
------------------------------------------------------------------------
Solution:
... copy here the SQL query and the output ...

SELECT  count(distinct index_name), sum(bytes) FROM dba_segments s, dba_indexes i
WHERE s.owner='NIKOVITS' 
AND index_type='BITMAP' 
AND segment_type like 'INDEX%' 
AND s.owner=i.owner 
AND segment_name=index_name;

COUNT(DISTINCTINDEX_NAME)   SUM(BYTES)
            3                 393216
========================================================================
6. (10 points)
Write a PL/SQL function which returns in a character string the list of table names 
(comma separated list in alphabetical order) of owner NIKOVITS, whose second last column has data type DATE.

CREATE OR REPLACE FUNCTION nt_tables RETURN VARCHAR2 IS
...
SELECT nt_tables() FROM dual;

You can check your program with the following:
set serveroutput on
EXECUTE check_plsql('nt_tables()');
------------------------------------------------------------------------
Solution:
... copy here the PL/SQL program and the output ...

CREATE OR REPLACE FUNCTION nt_tables RETURN VARCHAR2 IS
    tt varchar2(200);
    CURSOR curs1 IS 
    SELECT * FROM dba_tab_columns c WHERE owner='NIKOVITS' AND data_type='DATE' AND column_id = (SELECT max(column_id) FROM dba_tab_columns WHERE owner='NIKOVITS' and c.table_name = table_name) - 1 order by table_name;
    rec curs1%ROWTYPE;
begin
    OPEN curs1;
    LOOP
        FETCH curs1 INTO rec;
        EXIT WHEN curs1%NOTFOUND;
        tt := tt || rec.table_name || ', ';
        dbms_output.put_line(rec.table_name);
    END LOOP;
    CLOSE curs1;
    return substr(tt, 0, length(tt)-2);
end;
/

nt_tables()
CUSTOMER,PROBA123,TIPUS_PROBA

========================================================================
7. (10 points)
Write a PL/SQL procedure which prints out the data blocks of table NIKOVITS.CUSTOMERS
in which the number of records is greater than 40. The output has 3 columns: File_id, Block_number
and the number of records within that block. Columns are separeted by spaces.

CREATE OR REPLACE PROCEDURE gt_40 IS
...
set serveroutput on
EXECUTE gt_40();

You can check your program with the following:
EXECUTE check_plsql('gt_40()');
------------------------------------------------------------------------
Solution:
... copy here the PL/SQL program and the output ...

SELECT dbms_rowid.rowid_relative_fno(ROWID) file_no,
       dbms_rowid.rowid_block_number(ROWID) block_no, count(*)
FROM nikovits.customers
GROUP BY dbms_rowid.rowid_block_number(ROWID), dbms_rowid.rowid_relative_fno(ROWID)
having count(*)>40

file_no  block_no  count(*)
   7      5558       41
   2      54981      41
========================================================================

